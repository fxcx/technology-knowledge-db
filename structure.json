{
  "package.json": "{\n  \"name\": \"technology-knowledge-db\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"author\": \"\",\n  \"private\": true,\n  \"license\": \"UNLICENSED\",\n  \"scripts\": {\n    \"build\": \"nest build\",\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n    \"start\": \"nest start\",\n    \"start:dev\": \"nest start --watch\",\n    \"start:debug\": \"nest start --debug --watch\",\n    \"start:prod\": \"node dist/main\",\n    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:cov\": \"jest --coverage\",\n    \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\n    \"test:e2e\": \"jest --config ./test/jest-e2e.json\"\n  },\n  \"dependencies\": {\n    \"@nestjs/common\": \"^10.0.0\",\n    \"@nestjs/config\": \"^3.3.0\",\n    \"@nestjs/core\": \"^10.0.0\",\n    \"@nestjs/mapped-types\": \"*\",\n    \"@nestjs/platform-express\": \"^10.0.0\",\n    \"@prisma/client\": \"^5.21.1\",\n    \"class-transformer\": \"^0.5.1\",\n    \"class-validator\": \"^0.14.1\",\n    \"reflect-metadata\": \"^0.2.0\",\n    \"rxjs\": \"^7.8.1\"\n  },\n  \"devDependencies\": {\n    \"@nestjs/cli\": \"^10.0.0\",\n    \"@nestjs/schematics\": \"^10.0.0\",\n    \"@nestjs/testing\": \"^10.0.0\",\n    \"@types/express\": \"^5.0.0\",\n    \"@types/jest\": \"^29.5.2\",\n    \"@types/node\": \"^20.3.1\",\n    \"@types/supertest\": \"^6.0.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.0.0\",\n    \"@typescript-eslint/parser\": \"^8.0.0\",\n    \"eslint\": \"^9.0.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-prettier\": \"^5.0.0\",\n    \"jest\": \"^29.5.0\",\n    \"prettier\": \"^3.0.0\",\n    \"prisma\": \"^5.21.1\",\n    \"source-map-support\": \"^0.5.21\",\n    \"supertest\": \"^7.0.0\",\n    \"ts-jest\": \"^29.1.0\",\n    \"ts-loader\": \"^9.4.3\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"typescript\": \"^5.1.3\"\n  },\n  \"jest\": {\n    \"moduleFileExtensions\": [\n      \"js\",\n      \"json\",\n      \"ts\"\n    ],\n    \"rootDir\": \"src\",\n    \"testRegex\": \".*\\\\.spec\\\\.ts$\",\n    \"transform\": {\n      \"^.+\\\\.(t|j)s$\": \"ts-jest\"\n    },\n    \"collectCoverageFrom\": [\n      \"**/*.(t|j)s\"\n    ],\n    \"coverageDirectory\": \"../coverage\",\n    \"testEnvironment\": \"node\"\n  }\n}\n",
  "prisma": {
    "schema.prisma": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Technology {\n  id          Int        @id @default(autoincrement())\n  name        String     @unique\n  description String\n  tags        String[]\n  createdAt   DateTime   @default(now()) @map(\"created_at\")\n  updatedAt   DateTime   @updatedAt @map(\"updated_at\")\n  questions   Question[]\n  resources   Resource[]\n  projects    Project[]  @relation(\"ProjectTechnology\")\n\n  @@map(\"technology\")\n}\n\nmodel Question {\n  id           Int        @id @default(autoincrement())\n  question     String\n  answer       String\n  createdAt    DateTime   @default(now()) @map(\"created_at\")\n  updatedAt    DateTime   @updatedAt @map(\"updated_at\")\n  technology   Technology @relation(fields: [technologyId], references: [id])\n  technologyId Int        @map(\"technology_id\")\n\n  @@map(\"question\")\n}\n\nmodel Resource {\n  id           Int        @id @default(autoincrement())\n  title        String\n  url          String\n  createdAt    DateTime   @default(now()) @map(\"created_at\")\n  updatedAt    DateTime   @updatedAt @map(\"updated_at\")\n  technology   Technology @relation(fields: [technologyId], references: [id])\n  technologyId Int        @map(\"technology_id\")\n\n  @@map(\"resource\")\n}\n\nmodel Project {\n  id           Int          @id @default(autoincrement())\n  name         String       @unique\n  description  String\n  createdAt    DateTime     @default(now()) @map(\"created_at\")\n  updatedAt    DateTime     @updatedAt @map(\"updated_at\")\n  technologies Technology[] @relation(\"ProjectTechnology\")\n\n  @@map(\"project\")\n}\n"
  },
  "src": {
    "app.module.ts": "import { Module } from '@nestjs/common';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { TechnologiesModule } from './technologies/technologies.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { ProjectsModule } from './projects/projects.module';\nimport { QuestionsModule } from './questions/questions.module';\nimport { ResourcesModule } from './resources/resources.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      // Se utiliza con:\n      // import { ConfigService } from '@nestjs/config';\n      // this.configService.get<string>('DATABASE_URL');\n      isGlobal: true,\n    }),\n    PrismaModule,\n    TechnologiesModule,\n    ProjectsModule,\n    QuestionsModule,\n    ResourcesModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n",
    "main.ts": "import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n",
    "prisma": {
      "prisma.module.ts": "import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}",
      "prisma.service.ts": "import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}"
    },
    "projects": {
      "dto": {
        "create-project.dto.ts": "import { IsString, IsArray, IsNotEmpty } from 'class-validator';\n\nexport class CreateProjectDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsString({ each: true })\n  technologies: string[];\n}"
      },
      "projects.controller.ts": "import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ProjectsService } from './projects.service';\nimport { CreateProjectDto } from './dto/create-project.dto';\nimport { UpdateProjectDto } from './dto/update-project.dto';\n\n@Controller('projects')\nexport class ProjectsController {\n  constructor(private readonly projectsService: ProjectsService) {}\n\n  @Post()\n  create(@Body() createProjectDto: CreateProjectDto) {\n    return this.projectsService.create(createProjectDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.projectsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.projectsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateProjectDto: UpdateProjectDto) {\n    return this.projectsService.update(+id, updateProjectDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.projectsService.remove(+id);\n  }\n}\n",
      "projects.module.ts": "import { Module } from '@nestjs/common';\nimport { ProjectsService } from './projects.service';\nimport { ProjectsController } from './projects.controller';\n\n@Module({\n  controllers: [ProjectsController],\n  providers: [ProjectsService],\n})\nexport class ProjectsModule {}\n",
      "projects.service.ts": "import { Injectable } from '@nestjs/common';\nimport { CreateProjectDto } from './dto/create-project.dto';\nimport { UpdateProjectDto } from './dto/update-project.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class ProjectsService {\n  constructor(private readonly prisma: PrismaService) {}\n  create(createProjectDto: CreateProjectDto) {\n    const { technologies, ...projectData } = createProjectDto;\n\n    return this.prisma.project.create({\n      data: {\n        ...projectData,\n        technologies: {\n          connect: technologies.map(name => ({ name })),\n        },\n      },\n      include: {\n        technologies: true,\n      },\n    });\n  }\n\n  findAll() {\n    return this.prisma.project.findMany({\n      include: {\n        technologies: true,\n      },\n    });\n  }\n\n  findOne(id: number) {\n    return this.prisma.project.findUnique({\n      where: { id },\n      include: {\n        technologies: true,\n      },\n    });\n  }\n\n  update(id: number, updateProjectDto: UpdateProjectDto) {\n    const { technologies, ...projectData } = updateProjectDto;\n\n    return this.prisma.project.update({\n      where: { id },\n      data: {\n        ...projectData,\n        technologies: technologies ? {\n          set: [], // desvincular todos los datos de la relaciÃ³n\n          connect: technologies.map(name => ({ name })),\n        } : undefined,\n      },\n      include: {\n        technologies: true,\n      },\n    });\n  }\n\n  remove(id: number) {\n    return this.prisma.project.delete({\n      where: { id },\n    });\n  }\n}\n"
    },
    "questions": {
      "dto": {
        "create-question.dto.ts": "import { IsString, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class CreateQuestionDto {\n  @IsString()\n  @IsNotEmpty()\n  question: string;\n\n  @IsString()\n  @IsNotEmpty()\n  answer: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  technologyId: number;\n}"
      },
      "questions.controller.ts": "import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { QuestionsService } from './questions.service';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\n\n@Controller('questions')\nexport class QuestionsController {\n  constructor(private readonly questionsService: QuestionsService) {}\n\n  @Post()\n  create(@Body() createQuestionDto: CreateQuestionDto) {\n    return this.questionsService.create(createQuestionDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.questionsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.questionsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQuestionDto: UpdateQuestionDto) {\n    return this.questionsService.update(+id, updateQuestionDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.questionsService.remove(+id);\n  }\n}\n",
      "questions.module.ts": "import { Module } from '@nestjs/common';\nimport { QuestionsService } from './questions.service';\nimport { QuestionsController } from './questions.controller';\n\n@Module({\n  controllers: [QuestionsController],\n  providers: [QuestionsService],\n})\nexport class QuestionsModule {}\n",
      "questions.service.ts": "import { Injectable } from '@nestjs/common';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class QuestionsService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  create(createQuestionDto: CreateQuestionDto) {\n    return this.prisma.question.create({\n      data: createQuestionDto,\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  findAll() {\n    return this.prisma.question.findMany({\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  findOne(id: number) {\n    return this.prisma.question.findUnique({\n      where: { id },\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  update(id: number, updateQuestionDto: UpdateQuestionDto) {\n    return this.prisma.question.update({\n      where: { id },\n      data: updateQuestionDto,\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  remove(id: number) {\n    return this.prisma.question.delete({\n      where: { id },\n    });\n  }\n}\n"
    },
    "resources": {
      "dto": {
        "create-resource.dto.ts": "import { IsString, IsNotEmpty, IsNumber, IsUrl } from 'class-validator';\n\nexport class CreateResourceDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsUrl()\n  url: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  technologyId: number;\n}"
      },
      "resources.controller.ts": "import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ResourcesService } from './resources.service';\nimport { CreateResourceDto } from './dto/create-resource.dto';\nimport { UpdateResourceDto } from './dto/update-resource.dto';\n\n@Controller('resources')\nexport class ResourcesController {\n  constructor(private readonly resourcesService: ResourcesService) {}\n\n  @Post()\n  create(@Body() createResourceDto: CreateResourceDto) {\n    return this.resourcesService.create(createResourceDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.resourcesService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.resourcesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateResourceDto: UpdateResourceDto) {\n    return this.resourcesService.update(+id, updateResourceDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.resourcesService.remove(+id);\n  }\n}\n",
      "resources.module.ts": "import { Module } from '@nestjs/common';\nimport { ResourcesService } from './resources.service';\nimport { ResourcesController } from './resources.controller';\n\n@Module({\n  controllers: [ResourcesController],\n  providers: [ResourcesService],\n})\nexport class ResourcesModule {}",
      "resources.service.ts": "import { Injectable } from '@nestjs/common';\nimport { CreateResourceDto } from './dto/create-resource.dto';\nimport { UpdateResourceDto } from './dto/update-resource.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class ResourcesService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  create(createResourceDto: CreateResourceDto) {\n    return this.prisma.resource.create({\n      data: createResourceDto,\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  findAll() {\n    return this.prisma.resource.findMany({\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  findOne(id: number) {\n    return this.prisma.resource.findUnique({\n      where: { id },\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  update(id: number, updateResourceDto: UpdateResourceDto) {\n    return this.prisma.resource.update({\n      where: { id },\n      data: updateResourceDto,\n      include: {\n        technology: true,\n      },\n    });\n  }\n\n  remove(id: number) {\n    return this.prisma.resource.delete({\n      where: { id },\n    });\n  }\n}\n"
    },
    "technologies": {
      "dto": {
        "create-technology.dto.ts": "import { IsString, IsArray, IsNotEmpty } from 'class-validator';\n\nexport class CreateTechnologyDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsString({ each: true })\n  tags: string[];\n\n  @IsArray()\n  @IsString({ each: true })\n  projects: string[];\n}"
      },
      "technologies.controller.ts": "import { Controller, Get, Post, Body, Patch, Param, Delete, Query } from '@nestjs/common';\nimport { TechnologiesService } from './technologies.service';\nimport { CreateTechnologyDto } from './dto/create-technology.dto';\nimport { UpdateTechnologyDto } from './dto/update-technology.dto';\n\n@Controller('technologies')\nexport class TechnologiesController {\n  constructor(private readonly technologiesService: TechnologiesService) {}\n\n  @Post()\n  create(@Body() createTechnologyDto: CreateTechnologyDto) {\n    return this.technologiesService.create(createTechnologyDto);\n  }\n\n  @Get()\n  findAll(\n    @Query('tag') tag?: string,\n    @Query('search') search?: string,\n    @Query('project') project?: string,\n  ) {\n    return this.technologiesService.findAll({ tag, search, project });\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.technologiesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTechnologyDto: UpdateTechnologyDto) {\n    return this.technologiesService.update(+id, updateTechnologyDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.technologiesService.remove(+id);\n  }\n}\n",
      "technologies.module.ts": "import { Module } from '@nestjs/common';\nimport { TechnologiesService } from './technologies.service';\nimport { TechnologiesController } from './technologies.controller';\n\n@Module({\n  controllers: [TechnologiesController],\n  providers: [TechnologiesService],\n})\nexport class TechnologiesModule {}\n",
      "technologies.service.ts": "import { Injectable } from '@nestjs/common';\nimport { CreateTechnologyDto } from './dto/create-technology.dto';\nimport { UpdateTechnologyDto } from './dto/update-technology.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { Technology, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class TechnologiesService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(createTechnologyDto: CreateTechnologyDto): Promise<Technology> {\n    const { projects, ...technologyData } = createTechnologyDto;\n\n    return this.prisma.technology.create({\n      data: {\n        ...technologyData,\n        projects: {\n          // conecta los proyectos que se han pasado como parÃ¡metro\n          connect: projects.map(name => ({ name })),\n        },\n      },\n      include: {\n        projects: true,\n      },\n    });\n  }\n\n  async findAll(params: {\n    tag?: string;\n    search?: string;\n    project?: string;\n  }): Promise<Technology[]> {\n    const { tag, search, project } = params;\n    const where: Prisma.TechnologyWhereInput = {};\n\n    if (tag) {\n      where.tags = {\n        has: tag,\n      };\n    }\n\n    if (search) {\n      where.OR = [\n        { name: { contains: search, mode: 'insensitive' } },\n        { description: { contains: search, mode: 'insensitive' } },\n      ];\n    }\n\n    if (project) {\n      where.projects = {\n        some: {\n          name: project,\n        },\n      };\n    }\n\n    return this.prisma.technology.findMany({\n      where,\n      include: {\n        questions: true,\n        resources: true,\n        projects: true,\n      },\n    });\n  }\n\n\n  findOne(id: number) {\n    return `This action returns a #${id} technology`;\n  }\n\n  update(id: number, updateTechnologyDto: UpdateTechnologyDto) {\n    return `This action updates a #${id} technology`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} technology`;\n  }\n}\n"
    }
  }
}